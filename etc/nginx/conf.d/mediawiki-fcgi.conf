#
# MediaWiki FastCGI with Response Caching (Setup)
#
# This file is meant to be included from within an http { } block.
# See 'snippets/run-php-mwfc' for usage within location { } blocks.
#
# Variables defined with map are prefixed to prevent clashes
# with other parts of your Nginx configuration.
#
# The prefix "mwfc" stands for "MediaWiki FastCGI / Cached".
#

# The cache is held in RAM and may use up to 16 GB of memory.
# The key zone may use an additional 250 MB of memory.
fastcgi_cache_path
	/dev/shm/ngx-mwcache
	levels=1:2
	keys_zone=MW:250m
	max_size=16000m
	inactive=2d;

# Check whether user is visiting from mobile.
# Use a simple 1/0 to be used as part of the cache key.
map $http_user_agent $mwfc_mobile {
	default 0;
	# Regexes based on:
	# https://gerrit.wikimedia.org/r/plugins/gitiles/operations/puppet/+/refs/heads/production/modules/varnish/templates/text-frontend.inc.vcl.erb
	"~(SMART-TV.*SamsungBrowser)" 0;
	"~*^(lge?|sie|nec|sgh|pg)-" 1;
	"~*(mobi|240x240|240x320|320x320|alcatel|android|audiovox|bada|benq|blackberry|cdm-|compal-|docomo|ericsson|hiptop|htc[-_]|huawei|ipod|kddi-|kindle|meego|midp|mitsu|mmp\/|mot-|motor|ngm_|nintendo|opera.m|palm|panasonic|philips|phone|playstation|portalmmm|sagem-|samsung|sanyo|sec-|semc-browser|sendo|sharp|silk|softbank|symbian|teleca|up.browser|vodafone|webos)"
		1;
}

### OLD PURGE STRATEGY ###
#
# PURGE request purges cached responses for GET requests.
# Responses for other requests, like HEAD, can't be purged.
# We also can't purge mobile from desktop, and vice versa.
#
#map $request_method $mwfc_req_key {
#	default $request_method;
#	PURGE   GET;
#}
#
#fastcgi_cache_key "$host$request_uri$mwfc_req_key$mwfc_mobile";
#
### END OLD PURGE STRATEGY ###

### NEW PURGE STRATEGY ###
#
# Use a wildcard to purge responses for all HTTP methods, mobile and desktop.
#
# However, we don't want a PURGE for the URI /foo to also purge /foo/bar.
# Worst case would be "/" purging "/*" i.e. all URIs.
#
# For this reason, we terminate the URI with a pipe.  This should be safe,
# because the pipe should be percent-encoded in the received URI.
#

map $request_method $mwfc_cache_key {
	default "$host$request_uri|$request_method$mwfc_mobile";
	PURGE   "$host$request_uri|*";
}

fastcgi_cache_key "$mwfc_cache_key";

### END NEW PURGE STRATEGY ###

# We will imitate Apache's AMF headers, which use true/false.
map $mwfc_mobile $mwfc_mobile_amf {
	0 false;
	1 true;
}

# This is the simplest way to make Extension:MobileFrontend understand
# that we do our own UA detection so it doesn't attempt to do its own.
fastcgi_param AMF_DEVICE_IS_MOBILE $mwfc_mobile_amf;

# MediaWiki doesn't set Cache-Control for some Special:MyXyz pages.
# https://phabricator.wikimedia.org/T272431
map $request_uri $mwfc_bypass_uri {
	default            0;
	"~*/Special:My"    1;
	"~*/Special:AllMy" 1;
}

# Does the URI represent a resource that varies on cookies?
# To be safe, assume all URIs do, except those specified.
map $request_uri $mwfc_bypass_cookie_uri {
	default 1;
	"~^/w/(load|opensearch_desc|thumb)\.php" 0;
	"~^/php/" 0;
}

# Do we actually have a cookie that causes response variance?
map $http_cookie $mwfc_bypass_cookie_value {
	default                0;
	"~([sS]ession|Token)=" 1;
	"~mf_useformat"        1;
	"~bg3wiki_noads"       1;
}

# Perform an AND on the previous two variables.
map $mwfc_bypass_cookie_uri$mwfc_bypass_cookie_value $mwfc_bypass_cookie {
	default 0;
	"11"    1;
}

log_format mwfc_stats
	"$upstream_cache_status $status $request_method $host$request_uri";
